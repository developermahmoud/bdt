// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package main.proxies;

public class Communication
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject communicationMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Main.Communication";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		StartDate("StartDate"),
		Remarks("Remarks"),
		Communication_Lead("Main.Communication_Lead"),
		Communication_CommunicationStatus("Main.Communication_CommunicationStatus"),
		Communication_CommunicationType("Main.Communication_CommunicationType");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Communication(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Communication(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject communicationMendixObject)
	{
		if (communicationMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, communicationMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.communicationMendixObject = communicationMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Communication.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static main.proxies.Communication initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return main.proxies.Communication.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static main.proxies.Communication initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new main.proxies.Communication(context, mendixObject);
	}

	public static main.proxies.Communication load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return main.proxies.Communication.initialize(context, mendixObject);
	}

	public static java.util.List<main.proxies.Communication> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> main.proxies.Communication.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * Commit the changes made on this proxy object.
	 * @throws com.mendix.core.CoreException
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 * @throws com.mendix.core.CoreException
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of StartDate
	 */
	public final java.util.Date getStartDate()
	{
		return getStartDate(getContext());
	}

	/**
	 * @param context
	 * @return value of StartDate
	 */
	public final java.util.Date getStartDate(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.StartDate.toString());
	}

	/**
	 * Set value of StartDate
	 * @param startdate
	 */
	public final void setStartDate(java.util.Date startdate)
	{
		setStartDate(getContext(), startdate);
	}

	/**
	 * Set value of StartDate
	 * @param context
	 * @param startdate
	 */
	public final void setStartDate(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date startdate)
	{
		getMendixObject().setValue(context, MemberNames.StartDate.toString(), startdate);
	}

	/**
	 * @return value of Remarks
	 */
	public final java.lang.String getRemarks()
	{
		return getRemarks(getContext());
	}

	/**
	 * @param context
	 * @return value of Remarks
	 */
	public final java.lang.String getRemarks(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Remarks.toString());
	}

	/**
	 * Set value of Remarks
	 * @param remarks
	 */
	public final void setRemarks(java.lang.String remarks)
	{
		setRemarks(getContext(), remarks);
	}

	/**
	 * Set value of Remarks
	 * @param context
	 * @param remarks
	 */
	public final void setRemarks(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String remarks)
	{
		getMendixObject().setValue(context, MemberNames.Remarks.toString(), remarks);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Communication_Lead
	 */
	public final main.proxies.Lead getCommunication_Lead() throws com.mendix.core.CoreException
	{
		return getCommunication_Lead(getContext());
	}

	/**
	 * @param context
	 * @return value of Communication_Lead
	 * @throws com.mendix.core.CoreException
	 */
	public final main.proxies.Lead getCommunication_Lead(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		main.proxies.Lead result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Communication_Lead.toString());
		if (identifier != null) {
			result = main.proxies.Lead.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Communication_Lead
	 * @param communication_lead
	 */
	public final void setCommunication_Lead(main.proxies.Lead communication_lead)
	{
		setCommunication_Lead(getContext(), communication_lead);
	}

	/**
	 * Set value of Communication_Lead
	 * @param context
	 * @param communication_lead
	 */
	public final void setCommunication_Lead(com.mendix.systemwideinterfaces.core.IContext context, main.proxies.Lead communication_lead)
	{
		if (communication_lead == null) {
			getMendixObject().setValue(context, MemberNames.Communication_Lead.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Communication_Lead.toString(), communication_lead.getMendixObject().getId());
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Communication_CommunicationStatus
	 */
	public final main.proxies.CommunicationStatus getCommunication_CommunicationStatus() throws com.mendix.core.CoreException
	{
		return getCommunication_CommunicationStatus(getContext());
	}

	/**
	 * @param context
	 * @return value of Communication_CommunicationStatus
	 * @throws com.mendix.core.CoreException
	 */
	public final main.proxies.CommunicationStatus getCommunication_CommunicationStatus(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		main.proxies.CommunicationStatus result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Communication_CommunicationStatus.toString());
		if (identifier != null) {
			result = main.proxies.CommunicationStatus.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Communication_CommunicationStatus
	 * @param communication_communicationstatus
	 */
	public final void setCommunication_CommunicationStatus(main.proxies.CommunicationStatus communication_communicationstatus)
	{
		setCommunication_CommunicationStatus(getContext(), communication_communicationstatus);
	}

	/**
	 * Set value of Communication_CommunicationStatus
	 * @param context
	 * @param communication_communicationstatus
	 */
	public final void setCommunication_CommunicationStatus(com.mendix.systemwideinterfaces.core.IContext context, main.proxies.CommunicationStatus communication_communicationstatus)
	{
		if (communication_communicationstatus == null) {
			getMendixObject().setValue(context, MemberNames.Communication_CommunicationStatus.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Communication_CommunicationStatus.toString(), communication_communicationstatus.getMendixObject().getId());
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Communication_CommunicationType
	 */
	public final main.proxies.CommunicationType getCommunication_CommunicationType() throws com.mendix.core.CoreException
	{
		return getCommunication_CommunicationType(getContext());
	}

	/**
	 * @param context
	 * @return value of Communication_CommunicationType
	 * @throws com.mendix.core.CoreException
	 */
	public final main.proxies.CommunicationType getCommunication_CommunicationType(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		main.proxies.CommunicationType result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Communication_CommunicationType.toString());
		if (identifier != null) {
			result = main.proxies.CommunicationType.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Communication_CommunicationType
	 * @param communication_communicationtype
	 */
	public final void setCommunication_CommunicationType(main.proxies.CommunicationType communication_communicationtype)
	{
		setCommunication_CommunicationType(getContext(), communication_communicationtype);
	}

	/**
	 * Set value of Communication_CommunicationType
	 * @param context
	 * @param communication_communicationtype
	 */
	public final void setCommunication_CommunicationType(com.mendix.systemwideinterfaces.core.IContext context, main.proxies.CommunicationType communication_communicationtype)
	{
		if (communication_communicationtype == null) {
			getMendixObject().setValue(context, MemberNames.Communication_CommunicationType.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Communication_CommunicationType.toString(), communication_communicationtype.getMendixObject().getId());
		}
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return communicationMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final main.proxies.Communication that = (main.proxies.Communication) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return entityName;
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
